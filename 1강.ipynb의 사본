{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPHCY5HzFB/Muo+/rntGj3s"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["# !pip install kagglehub[pandas-datasets]"],"metadata":{"id":"uxFaOo56Nfd7"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"J372l7qmPwRt","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1748480531758,"user_tz":-540,"elapsed":3151,"user":{"displayName":"닉네임","userId":"17687239402247980152"}},"outputId":"8305b36f-313b-4df0-bcc7-4a161e371ed8"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","source":["import pandas as pd\n","\n","file_path = '/content/drive/MyDrive/ai/data/Fish.csv'\n","df = pd.read_csv(file_path)\n","print(df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IUhfdBmFP_Us","executionInfo":{"status":"ok","timestamp":1748480532994,"user_tz":-540,"elapsed":1245,"user":{"displayName":"닉네임","userId":"17687239402247980152"}},"outputId":"64a3460a-1428-42b1-c0ce-10edb662723a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["    Species  Weight  Length1  Length2  Length3   Height   Width\n","0     Bream   242.0     23.2     25.4     30.0  11.5200  4.0200\n","1     Bream   290.0     24.0     26.3     31.2  12.4800  4.3056\n","2     Bream   340.0     23.9     26.5     31.1  12.3778  4.6961\n","3     Bream   363.0     26.3     29.0     33.5  12.7300  4.4555\n","4     Bream   430.0     26.5     29.0     34.0  12.4440  5.1340\n","..      ...     ...      ...      ...      ...      ...     ...\n","154   Smelt    12.2     11.5     12.2     13.4   2.0904  1.3936\n","155   Smelt    13.4     11.7     12.4     13.5   2.4300  1.2690\n","156   Smelt    12.2     12.1     13.0     13.8   2.2770  1.2558\n","157   Smelt    19.7     13.2     14.3     15.2   2.8728  2.0672\n","158   Smelt    19.9     13.8     15.0     16.2   2.9322  1.8792\n","\n","[159 rows x 7 columns]\n"]}]},{"cell_type":"code","source":["for i in df['Height']:\n","  if i >= 30:\n","    print(\"도미\")"],"metadata":{"id":"yULiOrtgR2FP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["bream_length = [25.4, 26.3, 26.5, 29.0, 29.0, 29.7, 29.7, 30.0, 30.0, 30.7, 31.0, 31.0,\n","                31.5, 32.0, 32.0, 32.0, 33.0, 33.0, 33.5, 33.5, 34.0, 34.0, 34.5, 35.0,\n","                35.0, 35.0, 35.0, 36.0, 36.0, 37.0, 38.5, 38.5, 39.5, 41.0, 41.0]\n","bream_weight = [242.0, 290.0, 340.0, 363.0, 430.0, 450.0, 500.0, 390.0, 450.0, 500.0, 475.0, 500.0,\n","                500.0, 340.0, 600.0, 600.0, 700.0, 700.0, 610.0, 650.0, 575.0, 685.0, 620.0, 680.0,\n","                700.0, 725.0, 720.0, 714.0, 850.0, 1000.0, 920.0, 955.0, 925.0, 975.0, 950.0]\n","smelt_length = [9.8, 10.5, 10.6, 11.0, 11.2, 11.3, 11.8, 11.8, 12.0, 12.2, 12.4, 13.0, 14.3, 15.0]\n","smelt_weight = [6.7, 7.5, 7.0, 9.7, 9.8, 8.7, 10.0, 9.9, 9.8, 12.2, 13.4, 12.2, 19.7, 19.9]"],"metadata":{"id":"TJn8BUwtWK06"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","plt.scatter(bream_length, bream_weight)\n","plt.scatter(smelt_length, smelt_weight)\n","plt.xlabel('length')\n","plt.ylabel('weight')\n","plt.show"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":618},"id":"bkiCE_PUYPsP","executionInfo":{"status":"ok","timestamp":1748480533293,"user_tz":-540,"elapsed":268,"user":{"displayName":"닉네임","userId":"17687239402247980152"}},"outputId":"814b906f-38cc-4f7e-fbf7-8c8c6dfaf19e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<function matplotlib.pyplot.show(close=None, block=None)>"],"text/html":["<div style=\"max-width:800px; border: 1px solid var(--colab-border-color);\"><style>\n","      pre.function-repr-contents {\n","        overflow-x: auto;\n","        padding: 8px 12px;\n","        max-height: 500px;\n","      }\n","\n","      pre.function-repr-contents.function-repr-contents-collapsed {\n","        cursor: pointer;\n","        max-height: 100px;\n","      }\n","    </style>\n","    <pre style=\"white-space: initial; background:\n","         var(--colab-secondary-surface-color); padding: 8px 12px;\n","         border-bottom: 1px solid var(--colab-border-color);\"><b>matplotlib.pyplot.show</b><br/>def show(*args, **kwargs) -&gt; None</pre><pre class=\"function-repr-contents function-repr-contents-collapsed\" style=\"\"><a class=\"filepath\" style=\"display:none\" href=\"#\">/usr/local/lib/python3.11/dist-packages/matplotlib/pyplot.py</a>Display all open figures.\n","\n","Parameters\n","----------\n","block : bool, optional\n","    Whether to wait for all figures to be closed before returning.\n","\n","    If `True` block and run the GUI main loop until all figure windows\n","    are closed.\n","\n","    If `False` ensure that all figure windows are displayed and return\n","    immediately.  In this case, you are responsible for ensuring\n","    that the event loop is running to have responsive figures.\n","\n","    Defaults to True in non-interactive mode and to False in interactive\n","    mode (see `.pyplot.isinteractive`).\n","\n","See Also\n","--------\n","ion : Enable interactive mode, which shows / updates the figure after\n","      every plotting command, so that calling ``show()`` is not necessary.\n","ioff : Disable interactive mode.\n","savefig : Save the figure to an image file instead of showing it on screen.\n","\n","Notes\n","-----\n","**Saving figures to file and showing a window at the same time**\n","\n","If you want an image file as well as a user interface window, use\n","`.pyplot.savefig` before `.pyplot.show`. At the end of (a blocking)\n","``show()`` the figure is closed and thus unregistered from pyplot. Calling\n","`.pyplot.savefig` afterwards would save a new and thus empty figure. This\n","limitation of command order does not apply if the show is non-blocking or\n","if you keep a reference to the figure and use `.Figure.savefig`.\n","\n","**Auto-show in jupyter notebooks**\n","\n","The jupyter backends (activated via ``%matplotlib inline``,\n","``%matplotlib notebook``, or ``%matplotlib widget``), call ``show()`` at\n","the end of every cell by default. Thus, you usually don&#x27;t have to call it\n","explicitly there.</pre>\n","      <script>\n","      if (google.colab.kernel.accessAllowed && google.colab.files && google.colab.files.view) {\n","        for (const element of document.querySelectorAll('.filepath')) {\n","          element.style.display = 'block'\n","          element.onclick = (event) => {\n","            event.preventDefault();\n","            event.stopPropagation();\n","            google.colab.files.view(element.textContent, 569);\n","          };\n","        }\n","      }\n","      for (const element of document.querySelectorAll('.function-repr-contents')) {\n","        element.onclick = (event) => {\n","          event.preventDefault();\n","          event.stopPropagation();\n","          element.classList.toggle('function-repr-contents-collapsed');\n","        };\n","      }\n","      </script>\n","      </div>"]},"metadata":{},"execution_count":10},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["length = bream_length + smelt_length\n","weight = bream_weight + smelt_weight\n","# 머신러닝 패키지 사이킷런 scikit-learn\n","fish_data = [[l,w] for l, w in zip(length, weight)] # zip함수 나열된 리스트에서 원소를 하나씩 꺼내줌\n","print(fish_data)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"o2lbdFVUYnOV","executionInfo":{"status":"ok","timestamp":1748480533299,"user_tz":-540,"elapsed":3,"user":{"displayName":"닉네임","userId":"17687239402247980152"}},"outputId":"7385e90f-2f93-4866-8c6c-ba860bd6084d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[25.4, 242.0], [26.3, 290.0], [26.5, 340.0], [29.0, 363.0], [29.0, 430.0], [29.7, 450.0], [29.7, 500.0], [30.0, 390.0], [30.0, 450.0], [30.7, 500.0], [31.0, 475.0], [31.0, 500.0], [31.5, 500.0], [32.0, 340.0], [32.0, 600.0], [32.0, 600.0], [33.0, 700.0], [33.0, 700.0], [33.5, 610.0], [33.5, 650.0], [34.0, 575.0], [34.0, 685.0], [34.5, 620.0], [35.0, 680.0], [35.0, 700.0], [35.0, 725.0], [35.0, 720.0], [36.0, 714.0], [36.0, 850.0], [37.0, 1000.0], [38.5, 920.0], [38.5, 955.0], [39.5, 925.0], [41.0, 975.0], [41.0, 950.0], [9.8, 6.7], [10.5, 7.5], [10.6, 7.0], [11.0, 9.7], [11.2, 9.8], [11.3, 8.7], [11.8, 10.0], [11.8, 9.9], [12.0, 9.8], [12.2, 12.2], [12.4, 13.4], [13.0, 12.2], [14.3, 19.7], [15.0, 19.9]]\n"]}]},{"cell_type":"code","source":["fish_target = [1] * 35 + [0] * 14 # 1 35개 0 14개\n","print(fish_target)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pL141WxcaOxO","executionInfo":{"status":"ok","timestamp":1748480533303,"user_tz":-540,"elapsed":4,"user":{"displayName":"닉네임","userId":"17687239402247980152"}},"outputId":"b9f65ec6-f661-49ae-aa97-1d8817613448"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n"]}]},{"cell_type":"code","source":["from sklearn.neighbors import KNeighborsClassifier #k-최근접 이웃 알고리즘 구현 클래스\n","\n","kn = KNeighborsClassifier()\n","kn.fit(fish_data, fish_target) #fit() 메서드는 주어진 데이터로 알고리즘을 훈련합니다.\n","kn.score(fish_data, fish_target) #score() 사이킷 런에서 모델을 평가하는 메서드  0~1사이 값을 반환 1 : 모든 데이터를 정확히 맞혔다(정확도)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LRJm8KtjdIeB","executionInfo":{"status":"ok","timestamp":1748480535035,"user_tz":-540,"elapsed":1731,"user":{"displayName":"닉네임","userId":"17687239402247980152"}},"outputId":"69ac80ff-e4f5-45d2-e2cd-241ff210d33e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1.0"]},"metadata":{},"execution_count":13}]},{"cell_type":"markdown","source":["k-최근접 이웃 알고리즘\n","> 어떤 데이터에 대한 답을 구할 때 주위의 다른 데이터를 보고 다수를 차지하는 것을 정답으로 사용합니다."],"metadata":{"id":"GBMFRMiKg3CO"}},{"cell_type":"code","source":["kn.predict([[30, 600]]) #predict() 새로운 데이터의 정답을 예측합니다./ 리스트의 리스트를 전달해야 한다.\n","# 현재 도미 = 1/ 방어 = 0"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QDYxEgPyg0n2","executionInfo":{"status":"ok","timestamp":1748480535040,"user_tz":-540,"elapsed":4,"user":{"displayName":"닉네임","userId":"17687239402247980152"}},"outputId":"01a2187c-9d2d-47a7-a5b0-2102797bec46"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([1])"]},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["# print(kn._fit_X) #fish_data를 모두 가지고 있습니다.\n","# print(kn._y) #fish_target을 가지고 있습니다.\n","# fit로 학습한 값이 들어가 있음"],"metadata":{"collapsed":true,"id":"q5ejsRZvi0-v"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","kn49 = KNeighborsClassifier(n_neighbors = 49)\n","kn49.fit(fish_data, fish_target)\n","kn49.score(fish_data, fish_target)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KCR1Sxv_jfAG","executionInfo":{"status":"ok","timestamp":1748480626794,"user_tz":-540,"elapsed":51,"user":{"displayName":"닉네임","userId":"17687239402247980152"}},"outputId":"5e2f092b-6f76-4a62-9005-48fe58a8379e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.7142857142857143"]},"metadata":{},"execution_count":17}]},{"cell_type":"code","source":["import getpass\n","\n","token = getpass.getpass('🔐 GitHub 토큰을 입력하세요: ')\n","repo = 'EndDefault/learn_AI_Book'\n","!git config --global user.name \"EndDefault\"\n","!git config --global user.email \"sungyu0127@gmail.com\"\n","\n","!git init\n","!echo \"# learn_AI_Book\" > README.md\n","!git add README.md\n","!git commit -m \"초기 커밋\"\n","!git branch -M main\n","!git remote remove origin\n","!git remote add origin https://{token}@github.com/{repo}.git\n","!git push -u origin main\n","\n","!git add \"1강.ipynb\"\n","!git commit -m \"1강 노트북 업로드\"\n","!git push --set-upstream origin main"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"js6NWUQ-WvgI","executionInfo":{"status":"ok","timestamp":1749383065847,"user_tz":-540,"elapsed":9554,"user":{"displayName":"닉네임","userId":"17687239402247980152"}},"outputId":"62a8553f-f4f4-4bcd-a6e9-2ce4ace672b9"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["🔐 GitHub 토큰을 입력하세요: ··········\n","Reinitialized existing Git repository in /content/.git/\n","[main 6b87c71] 초기 커밋\n"," 1 file changed, 3 deletions(-)\n","fatal: could not read Password for 'https://11BEEAXQA0ZhlsDei7nchx_AtdIFo0JLQKM5JQrhDIS0fMrhayxMW0aZKEJmJK9Wo3GS4VLCT6PKBxdrI7@github.com': No such device or address\n","fatal: pathspec 'your_file_name.ipynb' did not match any files\n","On branch main\n","Untracked files:\n","  (use \"git add <file>...\" to include in what will be committed)\n","\t\u001b[31m.config/\u001b[m\n","\t\u001b[31msample_data/\u001b[m\n","\n","nothing added to commit but untracked files present (use \"git add\" to track)\n","fatal: The current branch main has no upstream branch.\n","To push the current branch and set the remote as upstream, use\n","\n","    git push --set-upstream origin main\n","\n"]}]}]}